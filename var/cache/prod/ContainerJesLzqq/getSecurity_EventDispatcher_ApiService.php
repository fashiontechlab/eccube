<?php

namespace ContainerJesLzqq;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_EventDispatcher_ApiService extends Eccube_KernelProdContainer
{
    /*
     * Gets the private 'security.event_dispatcher.api' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->privates['security.event_dispatcher.api'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.api.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.api.user_provider'] ?? $container->load('getSecurity_Listener_Api_UserProviderService')), 'checkPassport'], 2048);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_checker.api', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.api'] ?? $container->load('getSecurity_Listener_UserChecker_ApiService')), 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.listener.user_checker.api', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.api'] ?? $container->load('getSecurity_Listener_UserChecker_ApiService')), 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler'] ?? $container->load('getEccubeLogoutSuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'eccube.security.logout.success_handler', class: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['eccube.security.logout.success_handler'] ?? $container->load('getEccube_Security_Logout_SuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'league.oauth2_server.listener.check_scope', class: 'League\\Bundle\\OAuth2ServerBundle\\Security\\EventListener\\CheckScopeListener')] fn () => ($container->privates['league.oauth2_server.listener.check_scope'] ?? $container->load('getLeague_Oauth2Server_Listener_CheckScopeService')), 'checkPassport'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }
}
