<?php

namespace ContainerC2HixPI;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLeague_Oauth2Server_Listener_AuthorizationRequestUserResolvingService extends Eccube_KernelInstallContainer
{
    /*
     * Gets the private 'league.oauth2_server.listener.authorization_request_user_resolving' shared service.
     *
     * @return \League\Bundle\OAuth2ServerBundle\EventListener\AuthorizationRequestUserResolvingListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server-bundle/src/EventListener/AuthorizationRequestUserResolvingListenerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server-bundle/src/EventListener/AuthorizationRequestUserResolvingListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Security.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security.php';

        return $container->privates['league.oauth2_server.listener.authorization_request_user_resolving'] = new \League\Bundle\OAuth2ServerBundle\EventListener\AuthorizationRequestUserResolvingListener(new \Symfony\Bundle\SecurityBundle\Security(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'security.authenticator.managers_locator' => ['privates', 'security.authenticator.managers_locator', 'getSecurity_Authenticator_ManagersLocatorService', true],
            'security.authorization_checker' => ['privates', 'security.authorization_checker', 'getSecurity_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', false],
            'security.firewall.event_dispatcher_locator' => ['privates', 'security.firewall.event_dispatcher_locator', 'getSecurity_Firewall_EventDispatcherLocatorService', true],
            'security.firewall.map' => ['privates', 'security.firewall.map', 'getSecurity_Firewall_MapService', false],
            'security.token_storage' => ['privates', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'security.user_checker' => ['privates', 'security.user_checker', 'getSecurity_UserCheckerService', true],
        ], [
            'request_stack' => '?',
            'security.authenticator.managers_locator' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.firewall.event_dispatcher_locator' => '?',
            'security.firewall.map' => '?',
            'security.token_storage' => '?',
            'security.user_checker' => '?',
        ]), ['dev' => NULL, 'api' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.oauth2.api' => ['privates', 'security.authenticator.oauth2.api', 'getSecurity_Authenticator_Oauth2_ApiService', true],
        ], [
            'security.authenticator.oauth2.api' => '?',
        ]), 'admin' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.form_login.admin' => ['privates', 'security.authenticator.form_login.admin', 'getSecurity_Authenticator_FormLogin_AdminService', true],
        ], [
            'security.authenticator.form_login.admin' => '?',
        ]), 'customer' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.form_login.customer' => ['privates', 'security.authenticator.form_login.customer', 'getSecurity_Authenticator_FormLogin_CustomerService', true],
            'security.authenticator.remember_me.customer' => ['privates', 'security.authenticator.remember_me.customer', 'getSecurity_Authenticator_RememberMe_CustomerService', true],
        ], [
            'security.authenticator.form_login.customer' => '?',
            'security.authenticator.remember_me.customer' => '?',
        ])]));
    }
}
